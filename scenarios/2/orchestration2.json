{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "2641624234439736172"
    }
  },
  "parameters": {
    "parLocation": {
      "type": "string",
      "defaultValue": "centralus"
    },
    "parNamePrefix": {
      "type": "string",
      "defaultValue": "scn2"
    },
    "parExistingLawResourceID": {
      "type": "string"
    },
    "parExistingKeyVaultResourceID": {
      "type": "string"
    }
  },
  "variables": {
    "varDeploymentNames": {
      "modRsg": "scenario-2-rsg",
      "modLaw": "scenario-2-law",
      "modAppInsights": "scenario-2-appInsights",
      "modKeyVault": "scenario-2-keyVault",
      "modAKS": "scenario-2-aks",
      "modSQL": "scenario-2-sql",
      "modACR": "scenario-2-acr",
      "modVNet": "scenario-2-vNet"
    },
    "varResourceNaming": {
      "modRsg": "[format('rsg-{0}-001', parameters('parNamePrefix'))]",
      "modLaw": "[format('law-{0}-001', parameters('parNamePrefix'))]",
      "modAppInsights": "[format('appi-{0}-001', parameters('parNamePrefix'))]",
      "modKeyVault": "[format('kvlt-{0}-001', parameters('parNamePrefix'))]",
      "modAKS": "[format('aks-{0}-001', parameters('parNamePrefix'))]",
      "modSQL": "[format('sql-{0}-001sdf', parameters('parNamePrefix'))]",
      "modACR": "[format('acr{0}001', parameters('parNamePrefix'))]",
      "modVNet": "[format('vNet-{0}-001', parameters('parNamePrefix'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('varDeploymentNames').modSQL]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varResourceNaming').modSQL]"
          },
          "location": {
            "value": "[parameters('parLocation')]"
          },
          "administratorLogin": {
            "value": "johndoe"
          },
          "administratorLoginPassword": {
            "reference": {
              "keyVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', format('{0}', split(parameters('parExistingKeyVaultResourceID'), '/')[8]))]"
              },
              "secretName": "sqlserversecret"
            }
          },
          "databases": {
            "value": [
              {
                "name": "scenario2DB",
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "tier": "GeneralPurpose",
                "skuName": "GP_Gen5_2",
                "maxSizeBytes": 34359738368,
                "licenseType": "LicenseIncluded",
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}', split(parameters('parExistingLawResourceID'), '/')[8]))]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "12100551480024895536"
            }
          },
          "parameters": {
            "administratorLogin": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Administrator username for the server. Required if no `administrators` object for AAD authentication is provided."
              }
            },
            "administratorLoginPassword": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The administrator login password. Required if no `administrators` object for AAD authentication is provided."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the server."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "databases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The databases to create in the server"
              }
            },
            "firewallRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The firewall rules to create in the server"
              }
            },
            "securityAlertPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The security alert policies to create in the server"
              }
            },
            "administrators": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The Azure Active Directory (AAD) administrator authentication. Required if no `administratorLogin` & `administratorLoginPassword` is provided."
              }
            }
          },
          "variables": {
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2021-05-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "administratorLogin": "[if(not(empty(parameters('administratorLogin'))), parameters('administratorLogin'), null())]",
                "administratorLoginPassword": "[if(not(empty(parameters('administratorLoginPassword'))), parameters('administratorLoginPassword'), null())]",
                "administrators": "[if(not(empty(parameters('administrators'))), createObject('administratorType', 'ActiveDirectory', 'azureADOnlyAuthentication', parameters('administrators').azureADOnlyAuthentication, 'login', parameters('administrators').login, 'principalType', parameters('administrators').principalType, 'sid', parameters('administrators').sid, 'tenantId', parameters('administrators').tenantId), null())]",
                "version": "12.0"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8090275037018830487"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "scope": "[format('Microsoft.Sql/servers/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_databases",
                "count": "[length(parameters('databases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-DB-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('databases')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "maxSizeBytes": {
                    "value": "[parameters('databases')[copyIndex()].maxSizeBytes]"
                  },
                  "tier": {
                    "value": "[parameters('databases')[copyIndex()].tier]"
                  },
                  "skuName": {
                    "value": "[parameters('databases')[copyIndex()].skuName]"
                  },
                  "collation": {
                    "value": "[parameters('databases')[copyIndex()].collation]"
                  },
                  "autoPauseDelay": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'autoPauseDelay'), parameters('databases')[copyIndex()].autoPauseDelay, '')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticLogsRetentionInDays'), parameters('databases')[copyIndex()].diagnosticLogsRetentionInDays, 365)]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticStorageAccountId'), parameters('databases')[copyIndex()].diagnosticStorageAccountId, '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubAuthorizationRuleId'), parameters('databases')[copyIndex()].diagnosticEventHubAuthorizationRuleId, '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubName'), parameters('databases')[copyIndex()].diagnosticEventHubName, '')]"
                  },
                  "isLedgerOn": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'isLedgerOn'), parameters('databases')[copyIndex()].isLedgerOn, false())]"
                  },
                  "location": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'location'), parameters('databases')[copyIndex()].location, reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').location)]"
                  },
                  "logsToEnable": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'logsToEnable'), parameters('databases')[copyIndex()].logsToEnable, createArray())]"
                  },
                  "licenseType": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'licenseType'), parameters('databases')[copyIndex()].licenseType, '')]"
                  },
                  "maintenanceConfigurationId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'maintenanceConfigurationId'), parameters('databases')[copyIndex()].maintenanceConfigurationId, '')]"
                  },
                  "minCapacity": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'minCapacity'), parameters('databases')[copyIndex()].minCapacity, '')]"
                  },
                  "metricsToEnable": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'metricsToEnable'), parameters('databases')[copyIndex()].metricsToEnable, createArray())]"
                  },
                  "highAvailabilityReplicaCount": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'highAvailabilityReplicaCount'), parameters('databases')[copyIndex()].highAvailabilityReplicaCount, 0)]"
                  },
                  "readScale": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'readScale'), parameters('databases')[copyIndex()].readScale, 'Disabled')]"
                  },
                  "requestedBackupStorageRedundancy": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'requestedBackupStorageRedundancy'), parameters('databases')[copyIndex()].requestedBackupStorageRedundancy, '')]"
                  },
                  "sampleName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'sampleName'), parameters('databases')[copyIndex()].sampleName, '')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'tags'), parameters('databases')[copyIndex()].tags, createObject())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticWorkspaceId'), parameters('databases')[copyIndex()].diagnosticWorkspaceId, '')]"
                  },
                  "zoneRedundant": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'zoneRedundant'), parameters('databases')[copyIndex()].zoneRedundant, false())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "942933052009254487"
                    }
                  },
                  "parameters": {
                    "collation": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The collation of the database."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the database."
                      }
                    },
                    "tier": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The tier or edition of the particular SKU."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SKU."
                      }
                    },
                    "maxSizeBytes": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. The max size of the database expressed in bytes."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of SQL Server"
                      }
                    },
                    "sampleName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the sample schema to apply when creating this database."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether or not this database is zone redundant."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The license type to apply for this database."
                      }
                    },
                    "readScale": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The state of read-only routing."
                      }
                    },
                    "highAvailabilityReplicaCount": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The number of readonly secondary replicas associated with the database."
                      }
                    },
                    "minCapacity": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Minimal capacity that database will always have allocated."
                      }
                    },
                    "autoPauseDelay": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Time in minutes after which database is automatically paused."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "SQLInsights",
                        "AutomaticTuning",
                        "QueryStoreRuntimeStatistics",
                        "QueryStoreWaitStatistics",
                        "Errors",
                        "DatabaseWaitStatistics",
                        "Timouts",
                        "Blocks",
                        "Deadlocks"
                      ],
                      "allowedValues": [
                        "SQLInsights",
                        "AutomaticTuning",
                        "QueryStoreRuntimeStatistics",
                        "QueryStoreWaitStatistics",
                        "Errors",
                        "DatabaseWaitStatistics",
                        "Timouts",
                        "Blocks",
                        "Deadlocks"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "metricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Basic"
                      ],
                      "allowedValues": [
                        "Basic"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "requestedBackupStorageRedundancy": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Geo",
                        "Local",
                        "Zone",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The storage account type to be used to store backups for this database."
                      }
                    },
                    "isLedgerOn": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created."
                      }
                    },
                    "maintenanceConfigurationId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Maintenance configuration ID assigned to the database. This configuration defines the period when the maintenance updates will occur."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "collation": "[parameters('collation')]",
                        "maxSizeBytes": "[parameters('maxSizeBytes')]",
                        "sampleName": "[parameters('sampleName')]",
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "licenseType": "[parameters('licenseType')]",
                        "readScale": "[parameters('readScale')]",
                        "minCapacity": "[if(not(empty(parameters('minCapacity'))), json(parameters('minCapacity')), 0)]",
                        "autoPauseDelay": "[if(not(empty(parameters('autoPauseDelay'))), json(parameters('autoPauseDelay')), 0)]",
                        "highAvailabilityReplicaCount": "[parameters('highAvailabilityReplicaCount')]",
                        "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]",
                        "isLedgerOn": "[parameters('isLedgerOn')]",
                        "maintenanceConfigurationId": "[if(not(empty(parameters('maintenanceConfigurationId'))), parameters('maintenanceConfigurationId'), null())]"
                      },
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('tier')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('serverName'), parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', last(split(parameters('name'), '/')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed database"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed database"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resourceGroup of the deployed database"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_firewallRules",
                "count": "[length(parameters('firewallRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-FirewallRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('firewallRules')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "endIpAddress": {
                    "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'endIpAddress'), parameters('firewallRules')[copyIndex()].endIpAddress, '0.0.0.0')]"
                  },
                  "startIpAddress": {
                    "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'startIpAddress'), parameters('firewallRules')[copyIndex()].startIpAddress, '0.0.0.0')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10790679833953472770"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Server Firewall Rule."
                      }
                    },
                    "endIpAddress": {
                      "type": "string",
                      "defaultValue": "0.0.0.0",
                      "metadata": {
                        "description": "Optional. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    },
                    "startIpAddress": {
                      "type": "string",
                      "defaultValue": "0.0.0.0",
                      "metadata": {
                        "description": "Optional. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of SQL Server"
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "endIpAddress": "[parameters('endIpAddress')]",
                        "startIpAddress": "[parameters('startIpAddress')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed firewall rule"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/firewallRules', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed firewall rule"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resourceGroup of the deployed firewall rule"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_securityAlertPolicies",
                "count": "[length(parameters('securityAlertPolicies'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-SecAlertPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('securityAlertPolicies')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "disabledAlerts": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'disabledAlerts'), parameters('securityAlertPolicies')[copyIndex()].disabledAlerts, createArray())]"
                  },
                  "emailAccountAdmins": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAccountAdmins'), parameters('securityAlertPolicies')[copyIndex()].emailAccountAdmins, false())]"
                  },
                  "emailAddresses": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAddresses'), parameters('securityAlertPolicies')[copyIndex()].emailAddresses, createArray())]"
                  },
                  "retentionDays": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'retentionDays'), parameters('securityAlertPolicies')[copyIndex()].retentionDays, 0)]"
                  },
                  "state": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'state'), parameters('securityAlertPolicies')[copyIndex()].state, 'Disabled')]"
                  },
                  "storageAccountAccessKey": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageAccountAccessKey'), parameters('securityAlertPolicies')[copyIndex()].storageAccountAccessKey, '')]"
                  },
                  "storageEndpoint": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageEndpoint'), parameters('securityAlertPolicies')[copyIndex()].storageEndpoint, '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "16647457056603630610"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Security Alert Policy."
                      }
                    },
                    "disabledAlerts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force."
                      }
                    },
                    "emailAccountAdmins": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies that the alert is sent to the account administrators."
                      }
                    },
                    "emailAddresses": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies an array of email addresses to which the alert is sent."
                      }
                    },
                    "retentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days to keep in the Threat Detection audit logs."
                      }
                    },
                    "state": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database."
                      }
                    },
                    "storageAccountAccessKey": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the identifier key of the Threat Detection audit storage account.."
                      }
                    },
                    "storageEndpoint": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the blob storage endpoint (e.g. https://mystorageaccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of SQL Server"
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/securityAlertPolicies",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "disabledAlerts": "[parameters('disabledAlerts')]",
                        "emailAccountAdmins": "[parameters('emailAccountAdmins')]",
                        "emailAddresses": "[parameters('emailAddresses')]",
                        "retentionDays": "[parameters('retentionDays')]",
                        "state": "[parameters('state')]",
                        "storageAccountAccessKey": "[if(empty(parameters('storageAccountAccessKey')), null(), parameters('storageAccountAccessKey'))]",
                        "storageEndpoint": "[if(empty(parameters('storageEndpoint')), null(), parameters('storageEndpoint'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed security alert policy"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed security alert policy"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resourceGroup of the deployed security alert policy"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed SQL server"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed SQL server"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resourceGroup of the deployed SQL server"
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('varDeploymentNames').modAKS]",
      "resourceGroup": "[variables('varResourceNaming').modRsg]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varResourceNaming').modAKS]"
          },
          "location": {
            "value": "[parameters('parLocation')]"
          },
          "primaryAgentPoolProfile": {
            "value": [
              {
                "name": "npsystem",
                "count": 3,
                "vmSize": "Standard_DS2_v2",
                "osDiskSizeGB": 80,
                "osDiskType": "Ephemeral",
                "osType": "Linux",
                "minCount": 3,
                "maxCount": 4,
                "enableAutoScaling": true,
                "type": "VirtualMachineScaleSets",
                "mode": "System",
                "scaleSetPriority": "Regular",
                "scaleSetEvictionPolicy": "Delete",
                "orchestratorVersion": "1.22.4",
                "enableNodePublicIP": false,
                "maxPods": 30,
                "availabilityZones": [
                  "1",
                  "2",
                  "3"
                ],
                "upgradeSettings": {
                  "maxSurge": "33%"
                },
                "nodeTaints": [
                  "CriticalAddonsOnly=true:NoSchedule"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "835629637926332940"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the name of the AKS cluster."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Specifies the location of AKS cluster. It picks up Resource Group's location by default."
              }
            },
            "aksClusterDnsPrefix": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Specifies the DNS prefix specified when creating the managed cluster."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "aksClusterNetworkPlugin": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "azure",
                "kubenet"
              ],
              "metadata": {
                "description": "Optional. Specifies the network plugin used for building Kubernetes network. - azure or kubenet."
              }
            },
            "aksClusterNetworkPolicy": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "azure",
                "calico"
              ],
              "metadata": {
                "description": "Optional. Specifies the network policy used for building Kubernetes network. - calico or azure"
              }
            },
            "aksClusterPodCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the CIDR notation IP range from which to assign pod IPs when kubenet is used."
              }
            },
            "aksClusterServiceCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges."
              }
            },
            "aksClusterDnsServiceIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr."
              }
            },
            "aksClusterDockerBridgeCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range."
              }
            },
            "aksClusterLoadBalancerSku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "basic",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the sku of the load balancer used by the virtual machine scale sets used by nodepools."
              }
            },
            "managedOutboundIPCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Outbound IP Count for the Load balancer."
              }
            },
            "aksClusterOutboundType": {
              "type": "string",
              "defaultValue": "loadBalancer",
              "allowedValues": [
                "loadBalancer",
                "userDefinedRouting"
              ],
              "metadata": {
                "description": "Optional. Specifies outbound (egress) routing method. - loadBalancer or userDefinedRouting."
              }
            },
            "aksClusterSkuTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Paid"
              ],
              "metadata": {
                "description": "Optional. Tier of a managed cluster SKU. - Free or Paid"
              }
            },
            "aksClusterKubernetesVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Version of Kubernetes specified when creating the managed cluster."
              }
            },
            "aksClusterAdminUsername": {
              "type": "string",
              "defaultValue": "azureuser",
              "metadata": {
                "description": "Optional. Specifies the administrator username of Linux virtual machines."
              }
            },
            "aksClusterSshPublicKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the SSH RSA public key string for the Linux nodes."
              }
            },
            "aksServicePrincipalProfile": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Information about a service principal identity for the cluster to use for manipulating Azure APIs."
              }
            },
            "aadProfileClientAppID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The client AAD application ID."
              }
            },
            "aadProfileServerAppID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The server AAD application ID."
              }
            },
            "aadProfileServerAppSecret": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The server AAD application secret."
              }
            },
            "aadProfileTenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Optional. Specifies the tenant ID of the Azure Active Directory used by the AKS cluster for authentication."
              }
            },
            "aadProfileAdminGroupObjectIDs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the AAD group object IDs that will have admin role of the cluster."
              }
            },
            "aadProfileManaged": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether to enable managed AAD integration."
              }
            },
            "aadProfileEnableAzureRBAC": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether to enable Azure RBAC for Kubernetes authorization."
              }
            },
            "disableLocalAccounts": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If set to true, getting static credentials will be disabled for this cluster. This must only be used on Managed Clusters that are AAD enabled."
              }
            },
            "nodeResourceGroup": {
              "type": "string",
              "defaultValue": "[format('{0}_aks_{1}_nodes', resourceGroup().name, parameters('name'))]",
              "metadata": {
                "description": "Optional. Name of the resource group containing agent pool nodes."
              }
            },
            "authorizedIPRanges": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer."
              }
            },
            "disableRunCommand": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether to disable run command for the cluster or not."
              }
            },
            "enablePrivateCluster": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether to create the cluster as a private cluster or not."
              }
            },
            "enablePrivateClusterPublicFQDN": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether to create additional public FQDN for private cluster or not."
              }
            },
            "usePrivateDNSZone": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If AKS will create a Private DNS Zone in the Node Resource Group."
              }
            },
            "primaryAgentPoolProfile": {
              "type": "array",
              "metadata": {
                "description": "Required. Properties of the primary agent pool."
              }
            },
            "agentPools": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Define one or more secondary/additional agent pools"
              }
            },
            "httpApplicationRoutingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the httpApplicationRouting add-on is enabled or not."
              }
            },
            "aciConnectorLinuxEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the aciConnectorLinux add-on is enabled or not."
              }
            },
            "azurePolicyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether the azurepolicy add-on is enabled or not."
              }
            },
            "azurePolicyVersion": {
              "type": "string",
              "defaultValue": "v2",
              "metadata": {
                "description": "Optional. Specifies the azure policy version to use."
              }
            },
            "kubeDashboardEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the kubeDashboard add-on is enabled or not."
              }
            },
            "enableKeyvaultSecretsProvider": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the KeyvaultSecretsProvider add-on is enabled or not."
              }
            },
            "enableSecretRotation": {
              "type": "string",
              "defaultValue": "false",
              "metadata": {
                "description": "Optional. Specifies whether the KeyvaultSecretsProvider add-on uses secret rotation."
              },
              "allowedValues": [
                "false",
                "true"
              ]
            },
            "autoScalerProfileScanInterval": {
              "type": "string",
              "defaultValue": "10s",
              "metadata": {
                "description": "Optional. Specifies the scan interval of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileScaleDownDelayAfterAdd": {
              "type": "string",
              "defaultValue": "10m",
              "metadata": {
                "description": "Optional. Specifies the scale down delay after add of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileScaleDownDelayAfterDelete": {
              "type": "string",
              "defaultValue": "20s",
              "metadata": {
                "description": "Optional. Specifies the scale down delay after delete of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileScaleDownDelayAfterFailure": {
              "type": "string",
              "defaultValue": "3m",
              "metadata": {
                "description": "Optional. Specifies scale down delay after failure of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileScaleDownUnneededTime": {
              "type": "string",
              "defaultValue": "10m",
              "metadata": {
                "description": "Optional. Specifies the scale down unneeded time of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileScaleDownUnreadyTime": {
              "type": "string",
              "defaultValue": "20m",
              "metadata": {
                "description": "Optional. Specifies the scale down unready time of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileUtilizationThreshold": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "Optional. Specifies the utilization threshold of the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileMaxGracefulTerminationSec": {
              "type": "string",
              "defaultValue": "600",
              "metadata": {
                "description": "Optional. Specifies the max graceful termination time interval in seconds for the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileBalanceSimilarNodeGroups": {
              "type": "string",
              "defaultValue": "false",
              "metadata": {
                "description": "Optional. Specifies the balance of similar node groups for the auto-scaler of the AKS cluster."
              },
              "allowedValues": [
                "false",
                "true"
              ]
            },
            "autoScalerProfileExpander": {
              "type": "string",
              "defaultValue": "random",
              "metadata": {
                "description": "Optional. Specifies the expand strategy for the auto-scaler of the AKS cluster."
              },
              "allowedValues": [
                "least-waste",
                "most-pods",
                "priority",
                "random"
              ]
            },
            "autoScalerProfileMaxEmptyBulkDelete": {
              "type": "string",
              "defaultValue": "10",
              "metadata": {
                "description": "Optional. Specifies the maximum empty bulk delete for the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileMaxNodeProvisionTime": {
              "type": "string",
              "defaultValue": "15m",
              "metadata": {
                "description": "Optional. Specifies the maximum node provisioning time for the auto-scaler of the AKS cluster. Values must be an integer followed by an \"m\". No unit of time other than minutes (m) is supported."
              }
            },
            "autoScalerProfileMaxTotalUnreadyPercentage": {
              "type": "string",
              "defaultValue": "45",
              "metadata": {
                "description": "Optional. Specifies the mximum total unready percentage for the auto-scaler of the AKS cluster. The maximum is 100 and the minimum is 0."
              }
            },
            "autoScalerProfileNewPodScaleUpDelay": {
              "type": "string",
              "defaultValue": "0s",
              "metadata": {
                "description": "Optional. For scenarios like burst/batch scale where you do not want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they are a certain age. Values must be an integer followed by a unit (\"s\" for seconds, \"m\" for minutes, \"h\" for hours, etc)."
              }
            },
            "autoScalerProfileOkTotalUnreadyCount": {
              "type": "string",
              "defaultValue": "3",
              "metadata": {
                "description": "Optional. Specifies the ok total unready count for the auto-scaler of the AKS cluster."
              }
            },
            "autoScalerProfileSkipNodesWithLocalStorage": {
              "type": "string",
              "defaultValue": "true",
              "metadata": {
                "description": "Optional. Specifies if nodes with local storage should be skipped for the auto-scaler of the AKS cluster."
              },
              "allowedValues": [
                "false",
                "true"
              ]
            },
            "autoScalerProfileSkipNodesWithSystemPods": {
              "type": "string",
              "defaultValue": "true",
              "metadata": {
                "description": "Optional. Specifies if nodes with system pods should be skipped for the auto-scaler of the AKS cluster."
              },
              "allowedValues": [
                "false",
                "true"
              ]
            },
            "podIdentityProfileAllowNetworkPluginKubenet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing."
              }
            },
            "podIdentityProfileEnable": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether the pod identity addon is enabled."
              }
            },
            "podIdentityProfileUserAssignedIdentities": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The pod identities to use in the cluster."
              }
            },
            "podIdentityProfileUserAssignedIdentityExceptions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The pod identity exceptions to allow."
              }
            },
            "enableOidcIssuerProfile": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether the The OIDC issuer profile of the Managed Cluster is enabled."
              }
            },
            "enableAzureDefender": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether to enable Azure Defender."
              }
            },
            "enablePodSecurityPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether to enable Kubernetes pod security policy."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "omsAgentEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether the OMS agent is enabled."
              }
            },
            "monitoringWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the monitoring log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "kube-apiserver",
                "kube-audit",
                "kube-controller-manager",
                "kube-scheduler",
                "cluster-autoscaler"
              ],
              "allowedValues": [
                "kube-apiserver",
                "kube-audit",
                "kube-controller-manager",
                "kube-scheduler",
                "cluster-autoscaler"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "identityType": "[if(parameters('systemAssignedIdentity'), 'SystemAssigned', if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "aksClusterLinuxProfile": {
              "adminUsername": "[parameters('aksClusterAdminUsername')]",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('aksClusterSshPublicKey')]"
                  }
                ]
              }
            },
            "lbProfile": {
              "managedOutboundIPs": {
                "count": "[parameters('managedOutboundIPCount')]"
              },
              "effectiveOutboundIPs": []
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2021-11-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
              "identity": "[variables('identity')]",
              "properties": {
                "kubernetesVersion": "[if(empty(parameters('aksClusterKubernetesVersion')), null(), parameters('aksClusterKubernetesVersion'))]",
                "dnsPrefix": "[parameters('aksClusterDnsPrefix')]",
                "agentPoolProfiles": "[parameters('primaryAgentPoolProfile')]",
                "sku": {
                  "name": "Basic",
                  "tier": "[parameters('aksClusterSkuTier')]"
                },
                "linuxProfile": "[if(empty(parameters('aksClusterSshPublicKey')), null(), variables('aksClusterLinuxProfile'))]",
                "servicePrincipalProfile": "[if(empty(parameters('aksServicePrincipalProfile')), null(), parameters('aksServicePrincipalProfile'))]",
                "addonProfiles": {
                  "httpApplicationRouting": {
                    "enabled": "[parameters('httpApplicationRoutingEnabled')]"
                  },
                  "omsagent": {
                    "enabled": "[and(parameters('omsAgentEnabled'), not(empty(parameters('monitoringWorkspaceId'))))]",
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[if(not(empty(parameters('monitoringWorkspaceId'))), parameters('monitoringWorkspaceId'), null())]"
                    }
                  },
                  "aciConnectorLinux": {
                    "enabled": "[parameters('aciConnectorLinuxEnabled')]"
                  },
                  "azurepolicy": {
                    "enabled": "[parameters('azurePolicyEnabled')]",
                    "config": {
                      "version": "[parameters('azurePolicyVersion')]"
                    }
                  },
                  "kubeDashboard": {
                    "enabled": "[parameters('kubeDashboardEnabled')]"
                  },
                  "azureKeyvaultSecretsProvider": {
                    "enabled": "[parameters('enableKeyvaultSecretsProvider')]",
                    "config": {
                      "enableSecretRotation": "[parameters('enableSecretRotation')]"
                    }
                  }
                },
                "oidcIssuerProfile": "[if(parameters('enableOidcIssuerProfile'), createObject('enabled', parameters('enableOidcIssuerProfile')), null())]",
                "enableRBAC": "[parameters('aadProfileEnableAzureRBAC')]",
                "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                "enablePodSecurityPolicy": "[parameters('enablePodSecurityPolicy')]",
                "networkProfile": {
                  "networkPlugin": "[if(not(empty(parameters('aksClusterNetworkPlugin'))), parameters('aksClusterNetworkPlugin'), null())]",
                  "networkPolicy": "[if(not(empty(parameters('aksClusterNetworkPolicy'))), parameters('aksClusterNetworkPolicy'), null())]",
                  "podCidr": "[if(not(empty(parameters('aksClusterPodCidr'))), parameters('aksClusterPodCidr'), null())]",
                  "serviceCidr": "[if(not(empty(parameters('aksClusterServiceCidr'))), parameters('aksClusterServiceCidr'), null())]",
                  "dnsServiceIP": "[if(not(empty(parameters('aksClusterDnsServiceIP'))), parameters('aksClusterDnsServiceIP'), null())]",
                  "dockerBridgeCidr": "[if(not(empty(parameters('aksClusterDockerBridgeCidr'))), parameters('aksClusterDockerBridgeCidr'), null())]",
                  "outboundType": "[parameters('aksClusterOutboundType')]",
                  "loadBalancerSku": "[parameters('aksClusterLoadBalancerSku')]",
                  "loadBalancerProfile": "[if(not(equals(parameters('managedOutboundIPCount'), 0)), variables('lbProfile'), null())]"
                },
                "aadProfile": {
                  "clientAppID": "[parameters('aadProfileClientAppID')]",
                  "serverAppID": "[parameters('aadProfileServerAppID')]",
                  "serverAppSecret": "[parameters('aadProfileServerAppSecret')]",
                  "managed": "[parameters('aadProfileManaged')]",
                  "enableAzureRBAC": "[parameters('aadProfileEnableAzureRBAC')]",
                  "adminGroupObjectIDs": "[parameters('aadProfileAdminGroupObjectIDs')]",
                  "tenantID": "[parameters('aadProfileTenantId')]"
                },
                "autoScalerProfile": {
                  "balance-similar-node-groups": "[parameters('autoScalerProfileBalanceSimilarNodeGroups')]",
                  "expander": "[parameters('autoScalerProfileExpander')]",
                  "max-empty-bulk-delete": "[parameters('autoScalerProfileMaxEmptyBulkDelete')]",
                  "max-graceful-termination-sec": "[parameters('autoScalerProfileMaxGracefulTerminationSec')]",
                  "max-node-provision-time": "[parameters('autoScalerProfileMaxNodeProvisionTime')]",
                  "max-total-unready-percentage": "[parameters('autoScalerProfileMaxTotalUnreadyPercentage')]",
                  "new-pod-scale-up-delay": "[parameters('autoScalerProfileNewPodScaleUpDelay')]",
                  "ok-total-unready-count": "[parameters('autoScalerProfileOkTotalUnreadyCount')]",
                  "scale-down-delay-after-add": "[parameters('autoScalerProfileScaleDownDelayAfterAdd')]",
                  "scale-down-delay-after-delete": "[parameters('autoScalerProfileScaleDownDelayAfterDelete')]",
                  "scale-down-delay-after-failure": "[parameters('autoScalerProfileScaleDownDelayAfterFailure')]",
                  "scale-down-unneeded-time": "[parameters('autoScalerProfileScaleDownUnneededTime')]",
                  "scale-down-unready-time": "[parameters('autoScalerProfileScaleDownUnreadyTime')]",
                  "scale-down-utilization-threshold": "[parameters('autoScalerProfileUtilizationThreshold')]",
                  "scan-interval": "[parameters('autoScalerProfileScanInterval')]",
                  "skip-nodes-with-local-storage": "[parameters('autoScalerProfileSkipNodesWithLocalStorage')]",
                  "skip-nodes-with-system-pods": "[parameters('autoScalerProfileSkipNodesWithSystemPods')]"
                },
                "apiServerAccessProfile": {
                  "authorizedIPRanges": "[parameters('authorizedIPRanges')]",
                  "disableRunCommand": "[parameters('disableRunCommand')]",
                  "enablePrivateCluster": "[parameters('enablePrivateCluster')]",
                  "enablePrivateClusterPublicFQDN": "[parameters('enablePrivateClusterPublicFQDN')]",
                  "privateDNSZone": "[if(parameters('usePrivateDNSZone'), 'system', '')]"
                },
                "podIdentityProfile": {
                  "allowNetworkPluginKubenet": "[parameters('podIdentityProfileAllowNetworkPluginKubenet')]",
                  "enabled": "[parameters('podIdentityProfileEnable')]",
                  "userAssignedIdentities": "[parameters('podIdentityProfileUserAssignedIdentities')]",
                  "userAssignedIdentityExceptions": "[parameters('podIdentityProfileUserAssignedIdentityExceptions')]"
                },
                "securityProfile": "[if(parameters('enableAzureDefender'), createObject('azureDefender', createObject('enabled', parameters('enableAzureDefender'), 'logAnalyticsWorkspaceResourceId', if(not(empty(parameters('monitoringWorkspaceId'))), parameters('monitoringWorkspaceId'), null()))), null())]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "managedCluster_agentPools",
                "count": "[length(parameters('agentPools'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-ManagedCluster-AgentPool-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "managedClusterName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('agentPools')[copyIndex()].name]"
                  },
                  "availabilityZones": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'availabilityZones'), parameters('agentPools')[copyIndex()].availabilityZones, createArray())]"
                  },
                  "count": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'count'), parameters('agentPools')[copyIndex()].count, 1)]"
                  },
                  "sourceResourceId": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'sourceResourceId'), parameters('agentPools')[copyIndex()].sourceResourceId, '')]"
                  },
                  "enableAutoScaling": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'enableAutoScaling'), parameters('agentPools')[copyIndex()].enableAutoScaling, false())]"
                  },
                  "enableEncryptionAtHost": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'enableEncryptionAtHost'), parameters('agentPools')[copyIndex()].enableEncryptionAtHost, false())]"
                  },
                  "enableFIPS": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'enableFIPS'), parameters('agentPools')[copyIndex()].enableFIPS, false())]"
                  },
                  "enableNodePublicIP": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'enableNodePublicIP'), parameters('agentPools')[copyIndex()].enableNodePublicIP, false())]"
                  },
                  "enableUltraSSD": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'enableUltraSSD'), parameters('agentPools')[copyIndex()].enableUltraSSD, false())]"
                  },
                  "gpuInstanceProfile": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'gpuInstanceProfile'), parameters('agentPools')[copyIndex()].gpuInstanceProfile, '')]"
                  },
                  "kubeletDiskType": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'kubeletDiskType'), parameters('agentPools')[copyIndex()].kubeletDiskType, '')]"
                  },
                  "maxCount": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'maxCount'), parameters('agentPools')[copyIndex()].maxCount, -1)]"
                  },
                  "maxPods": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'maxPods'), parameters('agentPools')[copyIndex()].maxPods, -1)]"
                  },
                  "minCount": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'minCount'), parameters('agentPools')[copyIndex()].minCount, -1)]"
                  },
                  "mode": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'mode'), parameters('agentPools')[copyIndex()].mode, '')]"
                  },
                  "nodeLabels": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'nodeLabels'), parameters('agentPools')[copyIndex()].nodeLabels, createObject())]"
                  },
                  "nodePublicIpPrefixId": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'nodePublicIpPrefixId'), parameters('agentPools')[copyIndex()].nodePublicIpPrefixId, '')]"
                  },
                  "nodeTaints": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'nodeTaints'), parameters('agentPools')[copyIndex()].nodeTaints, createArray())]"
                  },
                  "orchestratorVersion": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'orchestratorVersion'), parameters('agentPools')[copyIndex()].orchestratorVersion, '')]"
                  },
                  "osDiskSizeGB": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'osDiskSizeGB'), parameters('agentPools')[copyIndex()].osDiskSizeGB, -1)]"
                  },
                  "osDiskType": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'osDiskType'), parameters('agentPools')[copyIndex()].osDiskType, '')]"
                  },
                  "osSku": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'osSku'), parameters('agentPools')[copyIndex()].osSku, '')]"
                  },
                  "osType": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'osType'), parameters('agentPools')[copyIndex()].osType, 'Linux')]"
                  },
                  "podSubnetId": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'podSubnetId'), parameters('agentPools')[copyIndex()].podSubnetId, '')]"
                  },
                  "proximityPlacementGroupId": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'proximityPlacementGroupId'), parameters('agentPools')[copyIndex()].proximityPlacementGroupId, '')]"
                  },
                  "scaleDownMode": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'scaleDownMode'), parameters('agentPools')[copyIndex()].scaleDownMode, 'Delete')]"
                  },
                  "scaleSetEvictionPolicy": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'scaleSetEvictionPolicy'), parameters('agentPools')[copyIndex()].scaleSetEvictionPolicy, 'Delete')]"
                  },
                  "scaleSetPriority": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'scaleSetPriority'), parameters('agentPools')[copyIndex()].scaleSetPriority, '')]"
                  },
                  "spotMaxPrice": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'spotMaxPrice'), parameters('agentPools')[copyIndex()].spotMaxPrice, -1)]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'tags'), parameters('agentPools')[copyIndex()].tags, createObject())]"
                  },
                  "type": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'type'), parameters('agentPools')[copyIndex()].type, '')]"
                  },
                  "maxSurge": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'maxSurge'), parameters('agentPools')[copyIndex()].maxSurge, '')]"
                  },
                  "vmSize": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'vmSize'), parameters('agentPools')[copyIndex()].vmSize, 'Standard_D2s_v3')]"
                  },
                  "vnetSubnetId": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'vnetSubnetId'), parameters('agentPools')[copyIndex()].vnetSubnetId, '')]"
                  },
                  "workloadRuntime": {
                    "value": "[if(contains(parameters('agentPools')[copyIndex()], 'workloadRuntime'), parameters('agentPools')[copyIndex()].workloadRuntime, '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8446599775866975092"
                    }
                  },
                  "parameters": {
                    "managedClusterName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the managed cluster"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the agent pool"
                      }
                    },
                    "availabilityZones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is \"VirtualMachineScaleSets\".\t"
                      }
                    },
                    "count": {
                      "type": "int",
                      "defaultValue": 1,
                      "maxValue": 1000,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Desired Number of agents (VMs) specified to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1."
                      }
                    },
                    "sourceResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This is the ARM ID of the source object to be used to create the target object."
                      }
                    },
                    "enableAutoScaling": {
                      "type": "bool",
                      "defaultValue": false,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Whether to enable auto-scaler"
                      }
                    },
                    "enableEncryptionAtHost": {
                      "type": "bool",
                      "defaultValue": false,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. This is only supported on certain VM sizes and in certain Azure regions. For more information, see: /azure/aks/enable-host-encryption\t"
                      }
                    },
                    "enableFIPS": {
                      "type": "bool",
                      "defaultValue": false,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. See Add a FIPS-enabled node pool (https://docs.microsoft.com/en-us/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details."
                      }
                    },
                    "enableNodePublicIP": {
                      "type": "bool",
                      "defaultValue": false,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see assigning a public IP per node (https://docs.microsoft.com/en-us/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false."
                      }
                    },
                    "enableUltraSSD": {
                      "type": "bool",
                      "defaultValue": false,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Whether to enable UltraSSD"
                      }
                    },
                    "gpuInstanceProfile": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "MIG1g",
                        "MIG2g",
                        "MIG3g",
                        "MIG4g",
                        "MIG7g",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU."
                      }
                    },
                    "kubeletDiskType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage."
                      }
                    },
                    "maxCount": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The maximum number of nodes for auto-scaling"
                      }
                    },
                    "maxPods": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The maximum number of pods that can run on a node."
                      }
                    },
                    "minCount": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The minimum number of nodes for auto-scaling"
                      }
                    },
                    "mode": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. A cluster must have at least one \"System\" Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: /azure/aks/use-system-pools"
                      }
                    },
                    "nodeLabels": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The node labels to be persisted across all nodes in agent pool."
                      }
                    },
                    "nodePublicIpPrefixId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ResourceId of the node PublicIPPrefix"
                      }
                    },
                    "nodeTaints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.\t"
                      }
                    },
                    "orchestratorVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see upgrading a node pool (https://docs.microsoft.com/en-us/azure/aks/use-multiple-node-pools#upgrade-a-node-pool)."
                      }
                    },
                    "osDiskSizeGB": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified."
                      }
                    },
                    "osDiskType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Ephemeral",
                        "Managed",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The default is \"Ephemeral\" if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to \"Managed\". May not be changed after creation. For more information see Ephemeral OS (https://docs.microsoft.com/en-us/azure/aks/cluster-configuration#ephemeral-os)."
                      }
                    },
                    "osSku": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "CBLMariner",
                        "Ubuntu",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Specifies an OS SKU. This value must not be specified if OSType is Windows."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "defaultValue": "Linux",
                      "allowedValues": [
                        "Linux",
                        "Windows"
                      ],
                      "metadata": {
                        "description": "Optional. The operating system type. The default is Linux."
                      }
                    },
                    "podSubnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subnet ID for the pod IPs. If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}\t"
                      }
                    },
                    "proximityPlacementGroupId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The ID for the Proximity Placement Group."
                      }
                    },
                    "scaleDownMode": {
                      "type": "string",
                      "defaultValue": "Delete",
                      "allowedValues": [
                        "Deallocate",
                        "Delete"
                      ],
                      "metadata": {
                        "description": "Optional. Describes how VMs are added to or removed from Agent Pools. See billing states (https://docs.microsoft.com/en-us/azure/virtual-machines/states-billing)."
                      }
                    },
                    "scaleSetEvictionPolicy": {
                      "type": "string",
                      "defaultValue": "Delete",
                      "allowedValues": [
                        "Deallocate",
                        "Delete"
                      ],
                      "metadata": {
                        "description": "Optional. The eviction policy specifies what to do with the VM when it is evicted. The default is Delete. For more information about eviction see spot VMs\t"
                      }
                    },
                    "scaleSetPriority": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Regular",
                        "Spot",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The Virtual Machine Scale Set priority."
                      }
                    },
                    "spotMaxPrice": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see spot VMs pricing (https://docs.microsoft.com/en-us/azure/virtual-machines/spot-vms#pricing)"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "type": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The type of Agent Pool."
                      }
                    },
                    "maxSurge": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This can either be set to an integer (e.g. \"5\") or a percentage (e.g. \"50%\"). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1. For more information, including best practices, see: /azure/aks/upgrade-cluster#customize-node-surge-upgrade"
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D2s_v3",
                      "metadata": {
                        "description": "Optional. VM size. VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: /azure/aks/quotas-skus-regions"
                      }
                    },
                    "vnetSubnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Node Subnet ID. If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}\t"
                      }
                    },
                    "workloadRuntime": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Determines the type of workload a node can run."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "creationData": {
                      "sourceResourceId": "[if(not(empty(parameters('sourceResourceId'))), parameters('sourceResourceId'), null())]"
                    },
                    "upgradeSettings": {
                      "maxSurge": "[parameters('maxSurge')]"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.ContainerService/managedClusters/agentPools",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('managedClusterName'), parameters('name'))]",
                      "properties": {
                        "availabilityZones": "[parameters('availabilityZones')]",
                        "count": "[parameters('count')]",
                        "creationData": "[if(not(empty(parameters('sourceResourceId'))), variables('creationData'), null())]",
                        "enableAutoScaling": "[parameters('enableAutoScaling')]",
                        "enableEncryptionAtHost": "[parameters('enableEncryptionAtHost')]",
                        "enableFIPS": "[parameters('enableFIPS')]",
                        "enableNodePublicIP": "[parameters('enableNodePublicIP')]",
                        "enableUltraSSD": "[parameters('enableUltraSSD')]",
                        "gpuInstanceProfile": "[if(not(empty(parameters('gpuInstanceProfile'))), parameters('gpuInstanceProfile'), null())]",
                        "kubeletDiskType": "[parameters('kubeletDiskType')]",
                        "maxCount": "[if(not(equals(parameters('maxCount'), -1)), parameters('maxCount'), null())]",
                        "maxPods": "[if(not(equals(parameters('maxPods'), -1)), parameters('maxPods'), null())]",
                        "minCount": "[if(not(equals(parameters('minCount'), -1)), parameters('minCount'), null())]",
                        "mode": "[if(not(empty(parameters('mode'))), parameters('mode'), null())]",
                        "nodeLabels": "[parameters('nodeLabels')]",
                        "nodePublicIPPrefixID": "[if(not(empty(parameters('nodePublicIpPrefixId'))), parameters('nodePublicIpPrefixId'), null())]",
                        "nodeTaints": "[parameters('nodeTaints')]",
                        "orchestratorVersion": "[parameters('orchestratorVersion')]",
                        "osDiskSizeGB": "[if(not(equals(parameters('osDiskSizeGB'), -1)), parameters('osDiskSizeGB'), null())]",
                        "osDiskType": "[if(not(empty(parameters('osDiskType'))), parameters('osDiskType'), null())]",
                        "osSKU": "[if(not(empty(parameters('osSku'))), parameters('osSku'), null())]",
                        "osType": "[parameters('osType')]",
                        "podSubnetID": "[if(not(empty(parameters('podSubnetId'))), parameters('podSubnetId'), null())]",
                        "proximityPlacementGroupID": "[if(not(empty(parameters('proximityPlacementGroupId'))), parameters('proximityPlacementGroupId'), null())]",
                        "scaleDownMode": "[parameters('scaleDownMode')]",
                        "scaleSetEvictionPolicy": "[parameters('scaleSetEvictionPolicy')]",
                        "scaleSetPriority": "[if(not(empty(parameters('scaleSetPriority'))), parameters('scaleSetPriority'), null())]",
                        "spotMaxPrice": "[parameters('spotMaxPrice')]",
                        "tags": "[parameters('tags')]",
                        "type": "[parameters('type')]",
                        "upgradeSettings": "[variables('upgradeSettings')]",
                        "vmSize": "[parameters('vmSize')]",
                        "vnetSubnetID": "[parameters('vnetSubnetId')]",
                        "workloadRuntime": "[parameters('workloadRuntime')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the agent pool"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerService/managedClusters/agentPools', parameters('managedClusterName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the agent pool"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the agent pool was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "managedCluster_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-ManagedCluster-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8893283904453668845"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "Azure Kubernetes Service Cluster Admin Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
                      "Azure Kubernetes Service Cluster User Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]",
                      "Azure Kubernetes Service Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
                      "Azure Kubernetes Service RBAC Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3498e952-d568-435e-9b2c-8d77e338d7f7')]",
                      "Azure Kubernetes Service RBAC Cluster Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b')]",
                      "Azure Kubernetes Service RBAC Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f6c6a51-bcf8-42ba-9220-52d62157d7db')]",
                      "Azure Kubernetes Service RBAC Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the managed cluster"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the managed cluster was deployed into"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the managed cluster"
              }
            },
            "controlPlaneFQDN": {
              "type": "string",
              "value": "[if(parameters('enablePrivateCluster'), reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).privateFQDN, reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).fqdn)]",
              "metadata": {
                "description": "The control plane FQDN of the managed cluster"
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2021-11-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name')), '2021-11-01-preview', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            },
            "kubeletidentityObjectId": {
              "type": "string",
              "value": "[if(contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))), 'identityProfile'), if(contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).identityProfile, 'kubeletidentity'), reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).identityProfile.kubeletidentity.objectId, ''), '')]",
              "metadata": {
                "description": "The Object ID of the AKS identity."
              }
            },
            "omsagentIdentityObjectId": {
              "type": "string",
              "value": "[if(contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))), 'addonProfiles'), if(contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).addonProfiles, 'omsagent'), if(contains(reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).addonProfiles.omsagent, 'identity'), reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))).addonProfiles.omsagent.identity.objectId, ''), ''), '')]",
              "metadata": {
                "description": "The Object ID of the OMS agent identity."
              }
            }
          }
        }
      }
    }
  ]
}